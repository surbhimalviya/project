1. For Setter Injection Main Class SpringQuestion1Test

package Spring_Core;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class SpringQuestion1
{
	@SuppressWarnings("unused")
	private static ApplicationContext context;

	public static void main(String[] args)
	{
			@SuppressWarnings("resource")
			ApplicationContext context = new ClassPathXmlApplicationContext("file:src/main/resources/Addressbean.xml");
			
			Customer customer = (Customer)context.getBean("Customer");
			System.out.println(customer);
			
	}
	
}

Address.java
package Spring_Core;

public class Address
{
	private String city, street, state, country;
	private int zip;
	
	public String getCity()
	{
		return city;
	}
	
	public void setCity(String city)
	{
		this.city = city;
	}
	
	public String getStreet()
	{
		return street;
	}
	
	public void setStreet(String street)
	{
		this.street = street;
	}
	
	public String getState()
	{
		return state;
	}
	
	public void setState(String state)
	{
		this.state = state;
	}
	
	public String getCountry()
	{
		return country;
	}
	
	public void setCountry(String country)
	{
		this.country = country;
	}
	
	public int getZip()
	{
		return zip;
	}
	
	public void setZip(int zip)
	{
		this.zip = zip;
	}
	
}

AddressBean.xml
<beans xmlns = "http://www.springframework.org/schema/beans"
		xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">
		
		<bean id = "Address" class = "Spring_Core.Address">
		<property name = "zip" value = "221"/>
		<property name = "city" value = "London"/>
		<property name = "street" value = "Baker Street"/>
		<property name = "state" value = "World"/>
		<property name = "country" value = "England"/>
		
		</bean>
		
		<bean id = "Customer" class = "Spring_Core.Customer">
		<property name = "customerId" value = "123"/>
		<property name = "customercontact" value = "123456"/>
		<property name = "customerAddress" ref = "Address"/>
		<property name = "customerName" value = "Sherlock Holmes"/>
		</bean>
	
		</beans>

Customer.java
package Spring_Core;

public class Customer
{
	private int customerId;
	private int customercontact;
	private String customerName;
	private Address customerAddress;

	public int getCustomerId()
	{
		return customerId;
	}
	
	public void setCustomerId(int customerId)
	{
		this.customerId = customerId;
	}
	
	public int getCustomercontact()
	{
		return customercontact;
	}
	
	public void setCustomercontact(int customercontact)
	{
		this.customercontact = customercontact;
	}
	
	public Address getCustomerAddress()
	{
		return customerAddress;
	}
	
	public void setCustomerAddress(Address customerAddress)
	{
		this.customerAddress = customerAddress;
	}
	
	public String getCustomerName()
	{
		return customerName;
	}
	
	public void setCustomerName(String customerName)
	{
		this.customerName = customerName;
	}

	public String toString()
	{
		return "Customer Id: "+getCustomerId()+ ", Customer Contact: "+getCustomercontact()+ ", Customer Address: {City: "+getCustomerAddress().getCity()+", Street: "+getCustomerAddress().getStreet()+", State: "+getCustomerAddress().getState()+", Country: "+getCustomerAddress().getCountry()+", Zip: "+getCustomerAddress().getZip()+"}, Customer Name: "+getCustomerName();
	}
	
}

For Constructor Main Class SpringQuestion1Test
package Spring_Core;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class SpringQuestion1
{
	@SuppressWarnings("unused")
	private static ApplicationContext context;

	public static void main(String[] args)
	{			
			@SuppressWarnings("resource")
			ApplicationContext context1 = new ClassPathXmlApplicationContext("file:src/main/resources/Customer.xml");
			
			Customer customer2 = (Customer)context1.getBean("Customer1");
			System.out.println(customer2);
			
	}
	
}

For Constructor Address.java
package Spring_Core;

public class Address
{
	private String city, street, state, country;
	private int zip;
	
	public String getCity()
	{
		return city;
	}
	
	public void setCity(String city)
	{
		this.city = city;
	}
	
	public String getStreet()
	{
		return street;
	}
	
	public void setStreet(String street)
	{
		this.street = street;
	}
	
	public String getState()
	{
		return state;
	}
	
	public void setState(String state)
	{
		this.state = state;
	}
	
	public String getCountry()
	{
		return country;
	}
	
	public void setCountry(String country)
	{
		this.country = country;
	}
	
	public int getZip()
	{
		return zip;
	}
	
	public void setZip(int zip)
	{
		this.zip = zip;
	}

	public Address(String city, String street, String state, String country, int zip) {
		super();
		this.city = city;
		this.street = street;
		this.state = state;
		this.country = country;
		this.zip = zip;
	}
	
}


For Constructor Customer.java

package Spring_Core;

public class Customer
{
	private int customerId;
	private int customercontact;
	private String customerName;
	private Address customerAddress;
	
	public Customer(int customerId, int customercontact, String customerName, Address customerAddress)
	{
		
		this.customerId = customerId;
		this.customercontact = customercontact;
		this.customerName = customerName;
		this.customerAddress = customerAddress;
	}

	public int getCustomerId()
	{
		return customerId;
	}
	
	public void setCustomerId(int customerId)
	{
		this.customerId = customerId;
	}
	
	public int getCustomercontact()
	{
		return customercontact;
	}
	
	public void setCustomercontact(int customercontact)
	{
		this.customercontact = customercontact;
	}
	
	public Address getCustomerAddress()
	{
		return customerAddress;
	}
	
	public void setCustomerAddress(Address customerAddress)
	{
		this.customerAddress = customerAddress;
	}
	
	public String getCustomerName()
	{
		return customerName;
	}
	
	public void setCustomerName(String customerName)
	{
		this.customerName = customerName;
	}

	public String toString()
	{
		return "Customer Id: "+getCustomerId()+ ", Customer Contact: "+getCustomercontact()+ ", Customer Address: {City: "+getCustomerAddress().getCity()+", Street: "+getCustomerAddress().getStreet()+", State: "+getCustomerAddress().getState()+", Country: "+getCustomerAddress().getCountry()+", Zip: "+getCustomerAddress().getZip()+"}, Customer Name: "+getCustomerName();
	}
	
}


For Constructor Customer.xml

<beans xmlns = "http://www.springframework.org/schema/beans"
		xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">
		
		<bean id = "Address" class = "Spring_Core.Address">
		
		<constructor-arg index = "0" name = "city" type = "java.lang.String" value = "London"/>
		<constructor-arg index = "1" name = "street" type = "java.lang.String" value = "Baker Street"/>
		<constructor-arg index = "2" name = "state" type = "java.lang.String" value = "World"/>
		<constructor-arg index = "3" name = "country" type = "java.lang.String" value = "England"/>
		<constructor-arg index = "4" name = "zip" type = "int" value = "221"/>
		
		</bean>
		
		<bean id = "Customer1" class = "Spring_Core.Customer">
		<constructor-arg index = "0" name = "customerId" type = "int" value = "123"/>
		<constructor-arg index = "1" name = "customercontact" type = "int" value = "123456"/>
		<constructor-arg index = "2" name = "customerName" type = "java.lang.String" value = "Sherlock Holmes"/>
		<constructor-arg index = "3" name = "customerAddress" ref = "Address"/>		
		</bean>
		</beans>
-------------------------------------------------------------------------------		
2.
Question.java

import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class Question {
	private int QuestionID;
	private String Question;
	private List<String> Answer;
	private Set<String> Answer1;
	private Map<Integer,String> Answer2;
	
	
	public Question(int questionID, String question, List<String> answer, Set<String> answer1, Map<Integer,String> answer2) {
		super();
		QuestionID = questionID;
		Question = question;
		Answer = answer;
		Answer1=answer1;
		Answer2=answer2;
	}
	
	
	public void showAnswer() {
		
		System.out.println(QuestionID+ " "+ Question);
		System.out.println("Answers from(List,Set, Map)");
		
		System.out.println("Answers from(List)");
		Iterator<String> i=Answer.iterator();
		while(i.hasNext()) {
			System.out.println(i.next());
		}
		System.out.println("Answers from(Set)");
		Iterator<String> iSet=Answer1.iterator();
		while(iSet.hasNext()) {
			System.out.println(iSet.next());
		}
		
		System.out.println("Answers from(Map)");
		for(Map.Entry<Integer, String> entry: Answer2.entrySet()) {
			System.out.println(entry.getKey()+ " "+ entry.getValue());
		}
		
		
	}
	
	

}

QuestionXML.xml

<beans xmlns="http://www.springframework.org/schema/beans"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://www.springframework.org/schema/beans
 http://www.springframework.org/schema/beans/spring-beans.xsd">
 
 
	<bean id="que" class="Question">
 		<constructor-arg value="20"></constructor-arg>
 		<constructor-arg value="Why Spring is Popular..?" />
 		<constructor-arg>
 			<list>
 			<value>1. It Support All Framework</value>
 			<value>2. Spring is used for Enterprise Level Application</value>
 			</list>
 		</constructor-arg>
 		<constructor-arg>
 			<set>
 			<value>1. All the  frameworks are supported by spring like Structs,Hibernate and Jsf.</value>
 			<value>2. simple learning curves</value>
 			</set>
 		</constructor-arg>
 		<constructor-arg>
 			<map>
 				<entry key="1" value="Spring Framework" />
 				<entry key="2" value="SpringBoot Framework" />
 			</map>
 		</constructor-arg>
 		
 	</bean>
 
 
 </beans>

TestQuestion.java

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class TestQuestion {

	private static ApplicationContext context;
	public static void main(String[] args) {
		// TODO Auto-generated method stub

		context=new ClassPathXmlApplicationContext("QuestionXML.xml");
		
		Question q=(Question) context.getBean("que");
		q.showAnswer();
		
		
	}
--------------------------------------------------------------

5. @Resource Annotation
Employee.java

import org.springframework.beans.factory.annotation.Required;

public class Employee {
 
    private String id;
    private String name;
 
    @Resource(name="mycompany")
   
    private Company company;
 
    public String getId() {
        return id;
    }
    public void setId(String id) {
        this.id = id;
    }
    public String getName() {
        return name;
    }
    @Required
    public void setName(String name) {
        this.name = name;
    }
    public Company getCompany() {
        return company;
    }
    public void setCompany(Company company) {
        this.company = company;
    }
 
    @Override
    public String toString() {
        return "Employee [id=" + id + ", name=" + name + ", company=" + company.toString() + "]";
    }
}

Company.java
package New;

public class Company {
	 
    private String name;
    private String location;
 
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public String getLocation() {
        return location;
    }
    public void setLocation(String location) {
        this.location = location;
    }
 
    @Override
    public String toString() {
        return "Company [name=" + name + ", location=" + location + "]";
    }
}
Test.java
package New;
 
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
 

 
public class Test {
 
    @SuppressWarnings("resource")
    public static void main(String[] args) {
 
        ApplicationContext context = new ClassPathXmlApplicationContext("n.xml");
 
     
     Employee emp=(Employee) context.getBean("myemployee");
        
        System.out.println(emp.toString());
    }
}
XML File
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
 
    <!-- To activate the '@Resource' annotation in the spring framework -->
    <context:annotation-config />
 
    <bean id="mycompany" class="New.Company">
        <property name="name" value="Test Pvt. Ltd." />
        <property name="location" value="India" />
    </bean>
 
    <bean id="myemployee" class="New.Employee">
        <property name="id" value="126" />
       <property name="name" value="Nam" />
    </bean></beans>
@Inject Annotation
Employee.java

public class Employee {
 
    private String id;
    private String name;
 
    
    @Inject
    private Company company;
 
    public String getId() {
        return id;
    }
    public void setId(String id) {
        this.id = id;
    }
    public String getName() {
        return name;
    }
    @Required
    public void setName(String name) {
        this.name = name;
    }
    public Company getCompany() {
        return company;
    }
    public void setCompany(Company company) {
        this.company = company;
    }
 
    @Override
    public String toString() {
        return "Employee [id=" + id + ", name=" + name + ", company=" + company.toString() + "]";
    }
}
----------------------------------------------------------------------------
7. package Spring_Core;

import java.beans.Expression;

import org.springframework.expression.ExpressionParser;
import org.springframework.expression.spel.standard.SpelExpressionParser;

public class Question7
{

	public static void main(String[] args) throws Exception
	{
		ExpressionParser parser = new SpelExpressionParser();  
		  
		//arithmetic operator  
		System.out.println(parser.parseExpression("'Welcome SPEL'+'!'").getValue());  
		System.out.println(parser.parseExpression("10 * 10/2").getValue());  
		System.out.println(parser.parseExpression("'Today is: '+ new java.util.Date()").getValue());  
		  
		//logical operator  
		System.out.println(parser.parseExpression("True and True").getValue());  
		  
		//Relational operator  
		System.out.println(parser.parseExpression("'sonoo'.length()==5").getValue());  


	}

}
------------------------------------------------------------------------------------
8. CustomerService.java (1st Way)
package QuestionEight;

import org.springframework.beans.factory.DisposableBean;
import org.springframework.beans.factory.InitializingBean;

public class CustomerService implements InitializingBean, DisposableBean {
	private String msg;

	public String getMsg() {
		return msg;
	}

	public void setMsg(String msg) {
		this.msg = msg;	}

	public void destroy() throws Exception {

		// TODO Auto-generated method stub
		System.out.println("Spring Container is destroy! Customer clean up");
	}

	public void afterPropertiesSet() throws Exception {
		// TODO Auto-generated method stub
		System.out.println("Init method after properties are set : " + msg);
	}}

Snippet.java
package QuestionEight;

import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class Snippet {
	public static void main(String[] args) {
		ConfigurableApplicationContext context = new ClassPathXmlApplicationContext(
				new String[] { "SpringCustomer.xml" });

		CustomerService cust = (CustomerService) context.getBean("customerService");

		System.out.println(cust);

		context.close();
	}
}


xml File

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd">

       <bean id="customerService" class="QuestionEight.CustomerService">
		<property name="msg" value="i'm property message" />
       </bean>
		
</beans>

MyBean.java (2nd Way)
package QuestionEight;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component
public class MyBean {

	public MyBean() {
		System.out.println("MyBean instance created");
	}

	@PostConstruct
	private void init() {
		System.out.println("Verifying Resources");
	}

	@PreDestroy
	private void shutdown() {
		System.out.println("Shutdown All Resources");
	}

	public void close() {
		System.out.println("Closing All Resources");
	}
}

SpringApp.java
package QuestionEight;

import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class SpringApp {

	public static void main(String[] args) {
		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();
		ctx.register(MyConfiguration.class);
		ctx.refresh();

		MyBean mb1 = ctx.getBean(MyBean.class);
		System.out.println(mb1.hashCode());

		MyBean mb2 = ctx.getBean(MyBean.class);
		System.out.println(mb2.hashCode());

		ctx.close();
	}

}
------------------------------------------------------------------------------
HelloWorld.java

9. package Spring_Core;
public class HelloWorld {
	 public void init() throws Exception
	    {
	        System.out.println(
	            "Bean HelloWorld has been "
	            + "instantiated and I'm "
	            + "the init() method");
	    }
	 
	    // This method executes
	    // when the spring container
	    // is closed
	    public void destroy() throws Exception
	    {
	        System.out.println(
	            "Container has been closed "
	            + "and I'm the destroy() method");
	    }

}

Client.java(Main)
import org.springframework.context.ConfigurableApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class Client {

	public static void main(String[] args) throws Exception {

		ConfigurableApplicationContext cap = new ClassPathXmlApplicationContext("spring.xml");
		cap.close();
	}
}


xml File
<beans xmlns="http://www.springframework.org/schema/beans"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://www.springframework.org/schema/beans
 http://www.springframework.org/schema/beans/spring-beans.xsd">
 
 
 
 <bean id="HelloBean"  class="springcore_example.HelloBean">
 
  <property name ="name" value="surbhi">
  </property>
 </bean>

 </beans>
---------------------------------------------------------------------------
Apcontext.java
10.	package example;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class Apcontext 
	{
		@SuppressWarnings("unused")
		private static ApplicationContext context;

		public static void main(String[] args)
		{
				@SuppressWarnings("resource")
				ApplicationContext context = new ClassPathXmlApplicationContext("file:src/main/resources/Addressbean.xml");
				
				Customer customer = (Customer)context.getBean("Customer");
				System.out.println(customer);
				
		}
		
	}

AddressBean.xml
<beans xmlns = "http://www.springframework.org/schema/beans"
		xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">
		
		<bean id = "Address" class = "example.Address">
		<property name = "zip" value = "221"/>
		<property name = "city" value = "London"/>
		<property name = "street" value = "Baker Street"/>
		<property name = "state" value = "World"/>
		<property name = "country" value = "England"/>
		
		</bean>
		
		<bean id = "Customer" class = "example.Customer">
		<property name = "customerId" value = "123"/>
		<property name = "customercontact" value = "123456"/>
		<property name = "customerAddress" ref = "Address"/>
		<property name = "customerName" value = "Sherlock Holmes"/>
		</bean>

Customer.java
package example;

import org.springframework.beans.BeansException;
import org.springframework.beans.factory.BeanNameAware;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;

//we used setter based dependency injection to demonstrate ApplicationContextAware Interface

public class Customer implements ApplicationContextAware, BeanNameAware{
private int customerId;
private int customercontact;
private String customerName;
private Address customerAddress;
@SuppressWarnings("unused")
private ApplicationContext Context = null;

public int getCustomerId()
{
	return customerId;
}

public void setCustomerId(int customerId)
{
	this.customerId = customerId;
}

public int getCustomercontact()
{
	return customercontact;
}

public void setCustomercontact(int customercontact)
{
	this.customercontact = customercontact;
}

public Address getCustomerAddress()
{
	return customerAddress;
}

public void setCustomerAddress(Address customerAddress)
{
	this.customerAddress = customerAddress;
}

public String getCustomerName()
{
	return customerName;
}

public void setCustomerName(String customerName)
{
	this.customerName = customerName;
}

public String toString()
{
	return "Customer Id: "+getCustomerId()+ ", Customer Contact: "+getCustomercontact()+ ", Customer Address: {City: "+getCustomerAddress().getCity()+", Street: "+getCustomerAddress().getStreet()+", State: "+getCustomerAddress().getState()+", Country: "+getCustomerAddress().getCountry()+", Zip: "+getCustomerAddress().getZip()+"}, Customer Name: "+getCustomerName();
}

public void setApplicationContext(ApplicationContext Context) throws BeansException {
	this.Context= Context;
	
	
}

public void setBeanName(String BeanName) {
	System.out.println("Bean name is: "+BeanName);
	
	
}

}


Address.java
package example;

public class Address {
	private String city, street, state, country;
	private int zip;
	
	public String getCity()
	{
		return city;
	}
	
	public void setCity(String city)
	{
		this.city = city;
	}
	
	public String getStreet()
	{
		return street;
	}
	
	public void setStreet(String street)
	{
		this.street = street;
	}
	
	public String getState()
	{
		return state;
	}
	
	public void setState(String state)
	{
		this.state = state;
	}
	
	public String getCountry()
	{
		return country;
	}
	
	public void setCountry(String country)
	{
		this.country = country;
	}
	
	public int getZip()
	{
		return zip;
	}
	
	public void setZip(int zip)
	{
		this.zip = zip;
	}
	
}
