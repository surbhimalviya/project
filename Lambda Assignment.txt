1. Write an application to perform basic arithmetic operations like add, substract, multiply & divide. You need to define a functional interface first.
package javalambda;

public interface Test
{
	int operation(int x, int y);
}

public class Arithmetic
{
	public static void main(String[] args) 
	{

		
		Test addition = (int x, int y)-> (x+y);
		System.out.println("Addition is:= "+ addition.operation(25,5));
		
		Test subtraction = (int a, int b)-> (a-b);
		System.out.println("Subtraction is:= "+ subtraction.operation(25,5));
		
		Test multiplication = (int a, int b)-> (a*b);
		System.out.println("Multiplication is:= "+ multiplication.operation(25,5));
		
		Test division = (int a, int b)-> (a/b);
		System.out.println("Division is:= "+ division.operation(25, 5));
		
	}
}

Output:
Addition is:= 30
Subtraction is:= 20
Multiplication is:= 125
Division is:= 5
------------------------------------------------------------------------------------
2. Write an application using lambda expressions to print Orders having 2 criteria implemented: 1) order price more than 10000 2) order status is ACCEPTED or COMPLETED.

package javalambda;
public interface Price
{
		public String price();

}
public class FunctionalInterface 
{
	public static void main(String[] args) {

        Integer i =200000;
        Price p = () -> {
            if (i>10000) 
            {
                return "Accepted";
            } else
                return "Not Accepted";
        };
        System.out.println(p.price());
    }
}

OUTPUT:
Accepted
--------------------------------------------------------------------------------

3. Use the functional interfaces Supplier, Consumer, Predicate & Function to invoke built-in methods from Java API.
class product {
	private double price = 0.0;

	public product(double price) {
		super();
		this.price = price;
	}

	public void setPrice(double price) {
		this.price = price;
	}
	public void printprice() {
		System.out.println("This is Consumer functional interface: " +price);
	}
}

import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Supplier;

public class product1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//consumer functional interface
	    Consumer<product>updatePrice = p ->p.setPrice(9.7);
	    product p = new product(2.0);
	    updatePrice.accept(p);
	    p.printprice();

	//Predicate functional interface
	    Predicate<String>isALongWord = t ->t.length() > 10;
	    String s = "successfully";
	boolean result = isALongWord.test(s);
	System.out.println("This is Predicate functional interface: "+s);

	//Function functional interface
	    Function<Integer, Double>half = a ->a / 2.0;
	System.out.println("This is Function functional interface: "+half.apply(10));

	//Supplier functional interface
	    Supplier<Double>randomValue = () ->Math.random();
	System.out.println("This is Supplier functional interface: "+randomValue.get());
	}

}

      	     
Output:  This is Consumer functional interface: 9.7
This is Predicate functional interface: successfully
This is Function functional interface: 5.0
This is Supplier functional interface: 0.34524593974962003
----------------------------------------------------------------------------

4. Remove the words that have odd lengths from list. HINT: Use one of the new methods from JDK 8. Use removeIf() method from Collection Interface.

import java.util.*;
 public class words 
 {
          public static void main(String[] args) {
		// TODO Auto-generated method stub
		 List<String> word = new ArrayList<String>();
	        word.add("aadi");
	        word.add("sonu");
	        word.add("surbhi");
	        word.add("om");
	        word.add("nisha");
	        word.add("pooja");
	        
	        word.removeIf(w-> w.length()%2!=0);
	        word.forEach(System.out::println);
	}

}
Output:	
aadi
sonu
surbhi
om
-------------------------------------------------------------------

5. Create a string that consists of the first letter of each word in the list  of the Strings provided. HINT: Use Consumer interface & a StringBuilder to construct the result.

import java.util.List;
import java.util.function.Consumer;

public class Firstword {

	public static void main(String[] args) {
	// TODO Auto-generated method stub
	var word = List.of("Snake", "Camel", "Elephant", "Bear", "Lion");
	word.forEach(new Consumer<String>()
					{
public void accept (String s)
{
	StringBuilder ob= new StringBuilder();
	for (String st : s.split(" "))
	{
		ob.append(st.charAt(0));
	}
	System.out.println(ob.toString());
}
});
	}}

Output: 
S
C
E
B
L
------------------------------------------------------------------
6. Replace every word in the list with its upper case equivalent. Use replaceAll() method & UnaryOperator interface.
 
import java.util.ArrayList;
import java.util.function.UnaryOperator;

class UpperCaseConversion implements UnaryOperator<String>{
	public String apply(String str) {
        return str.toUpperCase();
    }
}

public class uppercase {
    public static void main(String[] args) {
        ArrayList<String> l = new ArrayList<>();
        l.add("shivi");
        l.add("somu");
        l.add("pooja");
        l.add("krish");
        l.add("sonu");
        System.out.println("Contents of the list is: " + l);
        
        //replace all elements to uppercase
        l.replaceAll(new UpperCaseConversion());
        System.out.println("Contents after replace operation is:" + l);
    }
}

Output: Contents of the list is: [shivi,somu,pooja,krish,sonu]
Contents after replace operation is:[SHIVI,SOMU,POOJA,KRISH,SONU]
-----------------------------------------------------------------
7. Convert every key-value pair of the map into a string and append them all into a single string, in iteration order. HINT: Use Map.entrySet() method & a StringBuilder to construct the result String.

package lambdajava8;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;
	
public class MaptoString {
    public static void main(String[] cmd_lineParams) {
        Map<String, String> map = new HashMap<>(5);
        map.put("Surbhi", "1");
        map.put("Neha", "2");
        map.put("Pooja", "3");
        map.put("Nisha", "6");
        map.put("Om", "5");
        String s = map.entrySet().stream().map((entry) ->
                        "" + entry.getKey() + " \"" + entry.getValue().replaceAll("\"", "\\\\\"") + "\"")
                .collect(Collectors.joining(" "));
        System.out.println(s);

    }
}
OUTPUT:
Nisha "6" Surbhi "1" Om "5" Pooja "3" Neha "2"

----------------------------------------------------------------------------
8. Create a new thread that prints the numbers from the list. Use class Thread & interface Consumer.
import java.util.ArrayList;
import java.util.List;

public class Number {

	public static void main(String[] args) {
	// TODO Auto-generated method stub
	List<Integer> l = new ArrayList<Integer>(){{
            add(89);
            add(62);
            add(31);
            add(46);
            add(40);
            add(39);
        }};
        
        Thread mylambda = new Thread(()->System.out.println(l));
        mylambda.run();
	}
	}
Output: [89, 62, 31, 46, 40, 39]